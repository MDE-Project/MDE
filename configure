#!/bin/sh
set -e

build_config="${1:-Release}"

install_files=""
wayland_objects=""

BuildRule() {
cat << EOF >> build.ninja
rule compile_$1
  command = $CC \$in -c $BIN_CFLAGS $2 -MD -MF \$out.d -o \$out
  depfile = \$out.d
  description = Compiling \$out
rule link_$1
  command = $CC \$in $BIN_LDFLAGS $3 -o \$out
  description = Linking \$out
EOF
}

LibraryBuildRule() {
cat << EOF >> build.ninja
rule compile_$1
  command = $CC \$in -c $LIB_CFLAGS $2 -MD -MF \$out.d -o \$out
  depfile = \$out.d
  description = Compiling \$out
rule link_$1
  command = $CC \$in $LIB_LDFLAGS $3 -o \$out
  description = Linking \$out
EOF
}

Build() {
  objects=
  
  for file in $3; do
    object="Build/$build_config/$(echo $file | sed "s/\\.c$/.o/")"
    objects="$objects $object"
    
    echo "build $object: compile_$2 Source/$file" >> build.ninja
  done
  
  echo "build $1/$2: link_$2$objects" >> build.ninja
}

BuildWithDependency() {
  objects=
  
  for file in $4; do
    object="Build/$build_config/$(echo $file | sed "s/\\.c$/.o/")"
    objects="$objects $object"
    
    echo "build $object: compile_$2 Source/$file" >> build.ninja
  done
  
  echo "build $1/$2: link_$2$objects | $3" >> build.ninja
}

BuildWithWaylandAndDependency() {
  objects=
  
  for file in $4; do
    object="Build/$build_config/$(echo $file | sed "s/\\.c$/.o/")"
    objects="$objects $object"
    
    echo "build $object: compile_$2 Source/$file | wayland_headers" >> build.ninja
  done
  
  echo "build $1/$2: link_$2$objects $wayland_objects | $3" >> build.ninja
}

AddDefaultTarget() {
  echo "default $1" >> build.ninja
}

Install() {
  for file in $2; do
    install_files="$install_files $PREFIX/$1/$file"
    
    echo "build $PREFIX/$1/$file: install $1/$file" >> build.ninja
  done
}

IncludeBuildInfo() {
  . ./$1/BuildInfo
}

GenerateWaylandBindings() {
cat << EOF >> build.ninja
rule generate_wayland_code
  command = $WAYLAND_SCANNER private-code \$in \$out
  description = Generating Wayland code \$out
rule compile_wayland_code
  command = $CC \$in -c $LIB_CFLAGS -MD -MF \$out.d -o \$out
  depfile = \$out.d
  description = Compiling Wayland object \$out
rule generate_wayland_header
  command = $WAYLAND_SCANNER client-header \$in \$out
  description = Generating Wayland header \$out
EOF
  
  mkdir -p "Build/include/Wayland"
  if [ -f "Build/include/Wayland/Config.h" ]; then
    rm "Build/include/Wayland/Config.h"
  fi
  
  echo "#pragma once" >> "Build/include/Wayland/Config.h"
  
  headers=
  
  for protocol in $1; do
    xml="$WAYLAND_PROTOCOLS_DIR/$protocol.xml"
    
    if [ -f $xml ]; then
      name=$(basename $protocol | sed "s/-/_/g")
      
      echo "#define Wayland_has_$name" >> "Build/include/Wayland/Config.h"
      
      code="Build/$build_config/Wayland/$name.c"
      
      object="Build/$build_config/Wayland/$name.o"
      wayland_objects="$wayland_objects $object"
      
      header="Build/include/Wayland/$name.h"
      headers="$headers $header"
      
      echo "build $code: generate_wayland_code $xml" >> build.ninja
      echo "build $object: compile_wayland_code $code" >> build.ninja
      echo "build $header: generate_wayland_header $xml" >> build.ninja
    fi
    
    echo "build wayland_headers: phony$headers" >> build.ninja
  done
}

. "BuildConfigs/$build_config"

if [ -f build.ninja ]; then
  rm build.ninja
fi

touch build.ninja

cat << EOF >> build.ninja
rule install
  command = $INSTALL \$in \$out
  description = Installing \$out
EOF

IncludeBuildInfo .

echo "build install: phony$install_files" >> build.ninja

if [ ! -f .clangd ]; then
cat << EOF > .clangd
CompileFlags:
  Add: [ -xc, -I$(realpath include), -I$(realpath Build/include) ]
EOF
fi
